{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Alpaca","require","App","props","state","loading","returns","trades","cumulative","alpaca","keyId","secretKey","paper","usePolygon","getAccountActivities","activityTypes","date","Date","toISOString","split","then","setState","length","getPortfolioHistory","period","timeframe","history","toFixed","Card","Body","Title","className","style","fontSize","Subtitle","Text","borderTop","Spinner","display","this","animation","variant","id","color","Link","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wmBAKMA,EAASC,EAAQ,KAqERC,E,kDAjEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAS,EACTC,QAAS,EACTC,OAAQ,EACRC,WAAY,GANG,E,gEAUE,IAAD,OACZC,EAAS,IAAIT,EAAO,CACxBU,MAAO,uBACPC,UAAW,2CACXC,OAAO,EACPC,YAAY,IAGdJ,EAAOK,qBAAqB,CAC1BC,cAAe,OACfC,MAAM,IAAIC,MAAOC,cAAcC,MAAM,KAAK,KAE1CC,MAAK,SAACb,GACN,EAAKc,SAAS,CAAEd,OAAQA,EAAOe,YAGjCb,EAAOc,oBAAoB,CACzBC,OAAQ,KACRC,UAAW,OAEXL,MAAK,SAACM,GACN,EAAKL,SAAS,CACZf,SAA4C,IAAjCoB,EAAO,gBAAoB,IAAWC,QAAQ,GACzDnB,aAAekB,EAAO,OAAW,GAAK,KAAU,IAAU,KAAKC,QAAQ,GACvEtB,SAAU,S,+BAOd,OACE,kBAACuB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAOC,MAAO,CAAEC,SAAU,WAAhD,eACA,kBAACL,EAAA,EAAKM,SAAN,CAAeH,UAAU,oBAAoBC,MAAO,CAAEC,SAAU,UAAhE,qBACA,kBAACL,EAAA,EAAKO,KAAN,KACE,wBAAIH,MAAO,CAAEI,UAAW,iBACxB,kBAACC,EAAA,EAAD,CAASN,UAAU,OAAOC,MAAO,CAAEM,QAASC,KAAKnC,MAAMC,QAAU,GAAK,QAAUmC,UAAU,SAASC,QAAQ,YAC3G,yBAAKC,GAAG,OAAOV,MAAO,CAAEM,QAASC,KAAKnC,MAAMC,QAAU,OAAS,KAC7D,4BACE,8CAAmB,0BAAM2B,MAAO,CAAEW,MAAO,SAAWJ,KAAKnC,MAAMG,QAA/D,KACA,iDAAsB,0BAAMyB,MAAO,CAAEW,MAAOJ,KAAKnC,MAAME,SAAW,EAAI,OAAS,QAAUiC,KAAKnC,MAAME,QAA9E,KAAtB,KACA,oDAAyB,0BAAM0B,MAAO,CAAEW,MAAOJ,KAAKnC,MAAMI,YAAc,EAAI,OAAS,QAAU+B,KAAKnC,MAAMI,WAAjF,KAAzB,QAIN,kBAACoB,EAAA,EAAKgB,KAAN,CAAWC,KAAK,8BAA6B,wBAAIH,GAAG,QAAP,qC,GA3DrCI,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,QDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a87ad69.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Card from 'react-bootstrap/Card'\nimport Spinner from 'react-bootstrap/Spinner'\n\nconst Alpaca = require('@alpacahq/alpaca-trade-api')\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      returns: 0.00,\n      trades: 0,\n      cumulative: 0.00\n    }\n  }\n\n  componentDidMount() {\n    const alpaca = new Alpaca({\n      keyId: 'PKV5TEY0P817CP5HO20Z',\n      secretKey: 'UMfrjT/Lxj/LiyyP3I735sMEuQ8hIPli3HtrbO1a',\n      paper: true,\n      usePolygon: false\n    })\n\n    alpaca.getAccountActivities({\n      activityTypes: 'FILL',\n      date: new Date().toISOString().split('T')[0]\n    }\n    ).then((trades) => {\n      this.setState({ trades: trades.length })\n    })\n\n    alpaca.getPortfolioHistory({\n      period: '1D',\n      timeframe: '1D'\n    }\n    ).then((history) => {\n      this.setState({\n        returns: ((history['profit_loss_pct'][0]) * 100).toFixed(2),\n        cumulative: (((history['equity'][0] - 100000) / 100000) * 100).toFixed(2),\n        loading : false\n      })\n    })\n\n  }\n\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title className=\"mb-4\" style={{ fontSize: '10vmin' }}>Algo Trader</Card.Title>\n          <Card.Subtitle className=\"mb-3 text-success\" style={{ fontSize: '4vmin' }}>A Day Trading Bot</Card.Subtitle>\n          <Card.Text>\n            <hr style={{ borderTop: 'solid black' }} />\n            <Spinner className=\"mt-3\" style={{ display: this.state.loading ? '' : 'none' }} animation=\"border\" variant=\"primary\" />\n            <div id='text' style={{ display: this.state.loading ? 'none' : '' }}>\n              <ul>\n                <li>Trades Today : <span style={{ color: 'blue' }}>{this.state.trades}</span> </li>\n                <li>Today's Returns : <span style={{ color: this.state.returns >= 0 ? 'lime' : 'red' }}>{this.state.returns}%</span> </li>\n                <li>Cumulative Returns : <span style={{ color: this.state.cumulative >= 0 ? 'lime' : 'red' }}>{this.state.cumulative}%</span> </li>\n              </ul>\n            </div>\n          </Card.Text>\n          <Card.Link href=\"https://sreekved.github.io\"><h1 id='text'>ðŸ”—Sreekar Vedula</h1></Card.Link>\n        </Card.Body>\n      </Card>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}